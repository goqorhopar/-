import TelegramBot from 'node-telegram-bot-api';
import { config } from './config.js';
import axios from 'axios';

const token = config.telegramBotToken;

if (!token) {
  console.warn('TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. Telegram –±–æ—Ç –Ω–µ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω.');
} else {
  const bot = new TelegramBot(token, { polling: true });
  const userStates = new Map();

  bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    bot.sendMessage(chatId, `ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Meeting Bot - –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø—Ä–æ–¥–∞–∂!\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/process - –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –≤—Å—Ç—Ä–µ—á–∏\n/analyze - –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç\n/status - —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞`);
  });

  bot.onText(/\/process/, (msg) => {
    const chatId = msg.chat.id;
    userStates.set(chatId, { step: 'awaiting_meeting_url' });
    bot.sendMessage(chatId, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤—Å—Ç—Ä–µ—á—É:');
  });

  bot.onText(/\/analyze/, (msg) => {
    const chatId = msg.chat.id;
    userStates.set(chatId, { step: 'awaiting_transcript' });
    bot.sendMessage(chatId, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –≤—Å—Ç—Ä–µ—á–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.');
  });

  bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;
    const state = userStates.get(chatId);

    if (!state || msg.text?.startsWith('/')) return;

    try {
      if (state.step === 'awaiting_meeting_url') {
        userStates.set(chatId, { 
          step: 'awaiting_lead_id', 
          meetingUrl: text 
        });
        bot.sendMessage(chatId, '–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ª–∏–¥–∞ –≤ –ë–∏—Ç—Ä–∏–∫—Å:');
      } else if (state.step === 'awaiting_lead_id') {
        const meetingUrl = state.meetingUrl;
        const leadId = text;
        
        bot.sendMessage(chatId, 'üöÄ –ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ—Ü–µ—Å—Å –∞–Ω–∞–ª–∏–∑–∞ –≤—Å—Ç—Ä–µ—á–∏... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.');
        
        try {
          const response = await axios.post(`http://localhost:${config.port}/join`, {
            meetingUrl,
            leadId
          });

          if (response.data.ok) {
            const result = response.data;
            
            let message = `‚úÖ –ê–Ω–∞–ª–∏–∑ –≤—Å—Ç—Ä–µ—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n`;
            message += `ID –ª–∏–¥–∞: ${result.leadId}\n`;
            message += `–î–ª–∏–Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞: ${result.transcriptChars} —Å–∏–º–≤–æ–ª–æ–≤\n`;
            message += `–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: ${result.analysis.overallScore}/100\n`;
            message += `–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∫–ª–∏–µ–Ω—Ç–∞: ${result.analysis.category}\n\n`;
            message += `üí° –ö—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç:\n${result.analysis.summary}`;
            
            const chunks = message.match(/.{1,4000}/g) || [];
            for (const chunk of chunks) {
              await bot.sendMessage(chatId, chunk);
            }
            
          } else {
            bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å—Ç—Ä–µ—á–∏: ${response.data.error}`);
          }
        } catch (error) {
          bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Å—Ç—Ä–µ—á–∏: ${error.response?.data?.error || error.message}`);
        }
        
        userStates.delete(chatId);
      } else if (state.step === 'awaiting_transcript') {
        if (text.length < 100) {
          bot.sendMessage(chatId, '–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∑–∞–ø–∏—Å—å –≤—Å—Ç—Ä–µ—á–∏.');
          return;
        }
        
        bot.sendMessage(chatId, 'üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤—Å—Ç—Ä–µ—á—É –ø–æ 12 –ø—É–Ω–∫—Ç–∞–º —á–µ–∫-–ª–∏—Å—Ç–∞...');
        
        try {
          const response = await axios.post(`http://localhost:${config.port}/analyze`, {
            transcript: text
          });

          if (response.data.success) {
            const report = response.data.report;
            
            let message = `üìä –û–¢–ß–ï–¢ –ü–û –í–°–¢–†–ï–ß–ï\n\n`;
            message += `–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: ${report.overallScore}/100\n`;
            message += `–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∫–ª–∏–µ–Ω—Ç–∞: ${report.category}\n\n`;
            message += `1. –ê–Ω–∞–ª–∏–∑ –±–∏–∑–Ω–µ—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞: ${report.points[1]?.score}/10\n`;
            message += `2. –í—ã—è–≤–ª–µ–Ω–∏–µ –±–æ–ª–µ–π: ${report.points[2]?.score}/10\n`;
            message += `3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–π: ${report.points[3]?.score}/10\n`;
            message += `4. –†–µ–∞–∫—Ü–∏—è –Ω–∞ –º–æ–¥–µ–ª—å: ${report.points[4]?.score}/10\n`;
            message += `5. –ò–Ω—Ç–µ—Ä–µ—Å –∫ —Å–µ—Ä–≤–∏—Å—É: ${report.points[5]?.score}/10\n\n`;
            message += `üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n${report.summary}`;
            
            const chunks = message.match(/.{1,4000}/g) || [];
            for (const chunk of chunks) {
              await bot.sendMessage(chatId, chunk);
            }
            
            await bot.sendDocument(chatId, 
              Buffer.from(JSON.stringify(report, null, 2)), 
              { filename: 'meeting_report.json' }
            );
            
          } else {
            bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: ${response.data.error}`);
          }
        } catch (error) {
          bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –≤—Å—Ç—Ä–µ—á–∏: ${error.response?.data?.error || error.message}`);
        }
        
        userStates.delete(chatId);
      }
    } catch (error) {
      bot.sendMessage(chatId, `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${error.message}`);
      userStates.delete(chatId);
    }
  });

  bot.onText(/\/status/, (msg) => {
    const chatId = msg.chat.id;
    bot.sendMessage(chatId, `üü¢ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω\n–ü–æ—Ä—Ç: ${config.port}\n–ì–æ—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å—Ç—Ä–µ—á–∏!`);
  });

  console.log('Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω');
}

export default TelegramBot;
