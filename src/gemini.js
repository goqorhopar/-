import { GoogleGenerativeAI } from '@google/generative-ai';
import { config } from './config.js';

const client = new GoogleGenerativeAI(config.geminiApiKey);

const CHECKLIST = {
  "1. АНАЛИЗ ТЕКУЩЕГО БИЗНЕСА КЛИЕНТА": "Какие задачи стоят перед бизнесом клиента, как привлекает клиентов сейчас, уровень удовлетворенности результатами (1-10), портрет целевой аудитории и источники трафика, есть ли спрос или нужно создавать потребность, средний чек и наличие отдела продаж, насколько глубоко менеджер проработал эти вопросы",
  "2. ВЫЯВЛЕНИЕ БОЛЕЙ И ПОТРЕБНОСТЕЙ": "Конкретные проблемы с привлечением клиентов, упущенная прибыль из-за недостатка лидов, качество текущих лидов, методы выявления болей менеджером, какие озвучены боли, мотивации, опасения, степень закрытия потребностей (0-100%)",
  "3. ВОЗРАЖЕНИЯ ПО ЛИДОГЕНЕРАЦИИ": "Дорого, Не нужно, Сами справляемся, Некачественные лиды, методы отработки возражений, что сработало/не сработало, альтернативные варианты отработки",
  "4. РЕАКЦИЯ НА МОДЕЛЬ ГЕНЕРАЦИИ ЦЕЛЕВЫХ КЛИЕНТОВ": "Что клиент оценил в подходе передачи квалифицированных лидов, понимание ценности голосового подтверждения интереса",
  "5. ОСОБЫЙ ИНТЕРЕС К СЕРВИСУ": "Конкретные аспекты: работа с конкурентами, качество скриптов, УТП, записи разговоров, что больше всего зацепило клиента",
  "6. НАЙДЕННЫЕ ВОЗМОЖНОСТИ": "Увеличение конверсии отдела продаж, экономия времени и ресурсов на поиске клиентов, рост выручки от качественных лидов, возможность расширяться, открывать новые направления(регионы) не думая больше о привлечении клиентов",
  "7. ОШИБКИ МЕНЕДЖЕРА": "Конкретные промахи с примерами",
  "8. ПУТЬ К ЗАКРЫТИЮ": "Сделал ли менеджер финансовый расчет CPL, ROI, озвучил ли план дальнейшей коммуникации, поставил ли дедлайн для принятия решения, был ли призыв к действию, выяснил ли причины возможного отказа, как достичь договоренности быстрее, спросил ли менеджер о возможной причине, по которой клиент примет отрицательное решение",
  "9. ТОН БЕСЕДЫ": "Общая атмосфера встречи",
  "10. КОНТРОЛЬ ДИАЛОГА": "Кто доминировал в разговоре, кто задавал вопросы",
  "11. РЕКОМЕНДАЦИИ": "Конкретные советы для повышения эффективности",
  "12. КАТЕГОРИЯ КЛИЕНТА": "А (горячий), В (теплый), С (холодный) с обоснованием"
};

export async function runChecklist(transcript, logger) {
  const model = client.getGenerativeModel({ model: 'gemini-1.5-flash' });
  const prompt = `
Ты — эксперт по продажам и переговорам. Анализируешь транскрипции встреч и выдаешь структурированные саммари.

ЗАДАЧА
Проанализировать транскрипцию и выдать отчет по 12 пунктам:

${Object.entries(CHECKLIST).map(([key, value]) => `${key}: ${value}`).join('\n')}

ФОРМАТ ВЫВОДА
Верни JSON объект со следующими полями:
{
  "overallScore": 85,
  "points": {
    "1": {"score": 8, "comment": "Анализ выполнен хорошо..."},
    "2": {"score": 7, "comment": "Выявление болей..."},
    // ... все 12 пунктов
  },
  "summary": "Краткое резюме встречи",
  "category": "B"
}

Транскрипт встречи:
${transcript}
  `.trim();

  try {
    const res = await model.generateContent(prompt);
    const text = res.response.text();
    
    const jsonStart = text.indexOf('{');
    const jsonEnd = text.lastIndexOf('}');
    
    if (jsonStart >= 0 && jsonEnd > jsonStart) {
      const jsonString = text.slice(jsonStart, jsonEnd + 1);
      return JSON.parse(jsonString);
    } else {
      logger.warn({ text }, 'JSON not found in Gemini response');
      return { raw: text };
    }
  } catch (e) {
    logger.error({ err: e }, 'Gemini analysis failed');
    return { error: e.message };
  }
}
